name: Release pipeline (onrelease.yml)

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release-pipeline:
    permissions: write-all

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    env:
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
      DATABRICKS_TOKEN:  ${{ secrets.DATABRICKS_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: setup.py

      - name: Install pip, databricks, dbx
        run: |
          python -m pip install --upgrade pip
          pip install databricks-cli
          pip install dbx --upgrade
          databricks --version
          dbx --version
          
      - name: Echo Github Variables
        run: |
          echo "Echo Github Variables"
          echo github.head_ref ${{ github.head_ref }}
          echo github.ref ${{ github.ref }}
          echo github.ref_name ${{ github.ref_name }} 

      - name: list folders
        run: |
          ls -lah
          cat tag.txt
          cat conf/vars.yml

      # - name: Deploy the workflow as a job
      #   run: |
      #     dbx deploy dbx-demo-test-production-job

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: |
      #       Release for version ${{ github.ref }}.
      #     draft: false
      #     prerelease: false

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes

      - name: Run Databricks CLI commands to update Production Repo and deploy the production job
        run: |
          # configure databricks cli
          echo $DATABRICKS_TOKEN > token-file
          databricks configure --host $DATABRICKS_HOST --token-file token-file
          rm -f token-file
          databricks workspace ls /Repos
          
          # delete, recreate and update the production repo  
          databricks repos delete --path "/Repos/Production/dbx-demo-test" || true
          databricks repos create --url "https://github.com/charles138/dbx-demo-test.git" --provider gitHub --path "/Repos/Production/dbx-demo-test" 
          databricks repos update --path "/Repos/Production/dbx-demo-test" --tag ${{ github.ref_name }} 
          
          # deploy the production job
          dbx deploy dbx-demo-test-production-job --jinja-variables-file=conf/vars.yml
